Python 3


Importing packages from standard libraries.
3rd party code from opensource.
Developer best pactices


Lecture: Setting up a Cloud Server Development Environment
==========================================================

	To create your Cloud Server select "Playground" from the Linux Acad top menu selection.
	Choose a CentOS7 vm and go form there....
	
	
	Server created and credentials are:
		Username:	cloud_user 
	Temp. Password:	b64e7924db33d2b83c06 <-- changed after 1st login "su2k"
	
	IP Address
		Public IPv4		54.153.19.155 	<-- this IP will change at each reboot!
		Private IPv4	172.31.26.155 
				IPv6	2600:1f1c:2bf:6405:db37:4da4:f0d5:d010 
	
		Public Hostnames
			jara20001c.mylabserver.com
			jara20001d.mylabserver.com
	
	Auto Shutdown
	4:55 PM




Required Software Packages, Tools, and Files:
 git, wget, which, words (need file at /usr/share/dict/words)
 lsof, text editor of your choice, python 3.6.5


 
1. Installing Packages
The following commands are used on the cloud server to install the packages and files that we need. 
  $ sudo su -
  # yum update
  # yum groupinstall -y "development tools"
  # yum install -y lsof wget vim-enhanced words which htop
  # exit
  $
  
2. Configuring Git
From our user account (instead of root):

  $ git config --global user.name "Jeff Avendano"
  $ git config --global user.email "jara2000@gmail.com.com"



3. Customizing Bash
Downloading a bashrc file from the Linuxacademy "GitHub repository" and place it in your $HOME directory. 
This command will download the file, rename it, and place it in the proper directory:

Linuxacademy GitHub repository -> https://github.com/linuxacademy/content-python3-sysadmin

 $ curl https://raw.githubusercontent.com/linuxacademy/content-python3-sysadmin/master/helpers/bashrc -o ~/.bashrc
   

4. Customizing Vim  ,.. Like was done for bashrc above.

  $ curl https://raw.githubusercontent.com/linuxacademy/content-python3-sysadmin/master/helpers/vimrc -o ~/.vimrc
    
 

5. Create the GIT repo in your $HOME :

   $ mkdir sample ; cd sample
   sample $ touch file.txt
   
   sample $ git init   			<-- turn directory into a Git repository
   Initialized empty Git repository in /home/cloud_user/sample/.git/
   
   sample $ git add --all .		<-- means add every file that's underneath my current directory
   
   sample $ git status			<-- we have a new file "file.txtx" that hasn't been committed yet...
   # On branch master
   #
   # Initial commit
   #
   # Changes to be committed:
   #   (use "git rm --cached <file>..." to unstage)
   #
   #       new file:   file.txt
   #
   sample $
   
   
   
  sample $ git commit -m 'Added new file'
	[master (root-commit) a4dcc97] Added new file
	1 file changed, 0 insertions(+), 0 deletions(-)
	create mode 100644 file.txt
  sample[master] $


So now we have setup our Cloud server and installed some tools for our development purposes!
We will next install Python which we will compile from source and go from there.







Lecture: Installing Python 3 on CentOS 7
========================================

Download and Install Python 3 from Source

Here are the commands that we.ll run to build and install Python 3:

$ sudo su - 
[root] # yum install -y libffi-devel zlib-devel bzip2-devel openssl-devel \
ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel \
libpcap-devel xz-devel expat-devel


Goto: http://python.org  
		>> Downloads  
		 >> Source code 
		  >> and select the "Gzipped source tarball" version you want (Copy link address)

		  
		  
[root ] # cd /usr/src
[root ] # wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz
[root ] # tar xf Python-3.6.4.tgz
[root ] # cd Python-3.6.4
[root ] # ./configure --enable-optimizations
[root ] # make altinstall						<-- Very important, this will not overwrite the built in python 
[root ] # exit										Py2.x executable. It will create a new Py3 executable!
			back to regular user,..

*Ensure that secure_path in /etc/sudoers file includes /usr/local/bin




Upgrade Pip (Might not be Necessary)
The version of pip that we have might be up-to-date, but it.s good practice to try to 
update it after the installation. We need to use the pip3.6 executable because we.re 
working with Python 3, and we use sudo so that we can write files under the /usr/local directory.

	( I had no pip installed so I had to do :    $ sudo yum install python36-pip-8.1.2-7.el7.noarch  )
	$ sudo pip3.6 install --upgrade pip		<-- Pip is the package manager used when working with Python
	


	

	
	
Lecture: History & Benefits of Python
=====================================

Python 3 - 2008

Key Points About Python:

Object-Oriented Scripting Language.

Dynamic & strong typing system.
	Dynamic types are checked at runtime
	Strong types don.t change implicitly, can.t add 1 and "something".
	
Supports functional concepts like "map, reduce, filter" and list comprehension.

Whitespace delimited (no { or } around code blocks)

Pseudo-code like syntax

Extremely popular language used across many different disciplines (academia, data science, 
scripting, web development, etc.).

Large open source community and public package index (Pypi).

Runs on all major operating systems (historically more of a pain to run on Windows than 
Unix systems). Pre-installed on most *NIX systems (usually Python 2).

Supported by large companies such as Google & YouTube.

Consistently high on the Tiobe Index (one of the most searched programming languages). 
4th as of the time of recording this.

Placed in the Stack Overflow Developer Survey.s top 10 for Most Popular Programming Languages, 
Most Loved Programming Languages, and placed number 1 as the .Most Wanted Language. (meaning 
it.s the language that developers want to use the most).







Lecture: What's the Deal with Python 3?
=======================================

 https://wiki.python.org/moin/Python2orPython3

 https://docs.python.org/3/whatsnew/3.0.html




 
 
Lecture: Introducing the REPL for Rapid Experimentation 
=======================================================

REPL stands for: Read, Evaluate, Print, Loop 

$ python3.6
Python 3.6.4 (default, Feb 24 2019, 19:20:58)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>


to exit the REPL, you can either type:
 exit() 		, or you can hit 
 Ctrl+d






Lecture:  Creating and Running Python Scripts
=============================================

$ vim hello.py
print('Hello World!')

$ python3.6 hello.py
Hello World!

or 

$ vim hello.py
 #!/usr/local/bin/python3.6					<-> #!/usr/bin/env python3.6   <- this line from lab didn't work !!
 print('Hello World!')

$ chmod u+x hello.py
$ ./hello.py
Hello World!

							<-- create $HOME/bin and put scripts there
$ mkdir bin
$ mv hello.py ~/bin/
$ export PATH=$HOME/bin:$PATH	<-- add $HOME/bin to your $PATH from CKLI or in .bashrc
$ hello.py
Hello World!

====================
Lets put our Timezone instead of using UTC

$ sudo timedatectl list-timezones
$ sudo timedatectl set-timezone America/New_York
$ timedatectl 
====================







Lecture: Using Comments
=======================

"""
This is a string 
and it take multiple lines
"""






	==========================
	==========================
	|	 Common Data Types 	  |
	==========================
	==========================


Lecture: Strings   
----------------
 https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str


A string is an object.
	1. An object can have a state
	2. An object can hold on to some behaviour that it can use, this behaviour on objects refers to 
	   functions that are attached to the object itself and these are called methods.

Some Methods:	.find    .lower   .upper
   
examples:
	>>> "double".find('s')      here we call a method on the string double ( . )
	-1							<-- false
	>>> "double".find('l')
	4
	>>> "double".find('e')
	5
	>>> "double".find('d')
	0
	>>>
	>>> "TeSting".lower()		<-- calling the method "lower"
	'testing'
	>>> 'Password123'.lower()
	'password123'
	>>>
	>>> 'Ha' * 4				<-- arithmetic operators + and *
	'HaHaHaHa'
	>>>

special chars:   \t     \n    ""   ''    \  <-Esc
	>>> print('Hey\tYou')
	Hey     You
	>>> 'Hey\tYou'
	'Hey\tYou'
	>>>
	>>> print('Hey\nYou')
	Hey
	You
	>>>
	>>> print('Hey\\You')
	Hey\You
	>>>
	>>> print("'Hey' you 'what are'")
	'Hey' you 'what are'
	>>>
	>>> print('"Hey" you "what are"')
	"Hey" you "what are"

	>>> print('Your's is awesome')			
	File "<stdin>", line 1					<-- yup! need to Esc it with a \
1		print('Your's is awesome')
					^
	SyntaxError: invalid syntax
	
	>>> print('Your\'s is awesome')			<-- now it works!
	Your's is awesome
	>>>

	
	
	

Lecture: Numbers (int and float)	
--------------------------------
  https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex
  
  +  /  -  *  %   //   **

str   int   float

Operation		Result
--------------  -------------------------------------
x + y			sum of x and y	 	 
x - y			difference of x and y	 	 
x * y			product of x and y	 	 
x / y			quotient of x and y	 	 
x // y			floored quotient of x and y 
x % y			remainder of x / y
-x				x negated	 	 
+x				x unchanged	 	 
abs(x)			absolute value or magnitude of x
int(x)			x converted to integer
float(x)		x converted to floating point
complex(re, im)	a complex number with real part re,1
				imaginary part im. im defaults to zero.
c.conjugate()	conjugate of the complex number c	 	 
divmod(x, y)	the pair (x // y, x % y)
pow(x, y)		x to the power y
x ** y			x to the power y





Lecture: Booleans and None
--------------------------
  https://docs.python.org/3/library/stdtypes.html#truth-value-testing
	
	True  	False   None
	^		^		^
	
	>>> type(True)
	<class 'bool'>
	>>>
	>>> bool({})
	False
	>>>
	>>> bool("")
	False
	>>> bool("Jeff")
	True
	>>>

	>>> None
	>>>


	

Lecture: Working with Variables
-------------------------------

	>>> my_str = "This is a simple string"
	>>> my_str
	'This is a simple string'
	>>> print(my_str)
	This is a simple string
	>>>
	>>> my_str += " testing"
	>>> my_str
	'This is a simple string testing'
	>>>
	>>> my_str = my_str + " testing"
	>>> my_str
	'This is a simple string testing testing'
	>>>
	
	

	
Lecture: Lists
--------------

 [ ]  .append    .remove    .pop

Sequence Types . list, tuple, range:
  https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range  
  
Lists
  https://docs.python.org/3/library/stdtypes.html#list

	>>> my_list = [1, 2, 3, 4, 5]
	>>> len(my_list)
	5
	
	>>> my_list[0:2]
	[1, 2]
	>>> my_list[:3]
	[1, 2, 3]
	>>> my_list[0::1]
	[1, 2, 3, 4, 5]
	>>> my_list[0::2]
	[1, 3, 5]
  
Change a value in a list using the subscript equals operation: 
	>>> my_list[0] = "a"
	>>> my_list
	['a', 2, 3, 4, 5]

Example of a method that modifies the object that is calling the method:
	>>> my_list.append(6)
	>>> my_list.append(7)
	>>> my_list
	['a', 2, 3, 4, 5, 6, 7]	

Lists can be added together (concatenated): 	
	>>> my_list + [8, 9, 10]
	['a', 2, 3, 4, 5, 6, 7, 8, 9, 10]
	>>> my_list
	['a', 2, 3, 4, 5, 6, 7]
	>>> my_list += [8, 9, 10]
	>>> my_list
	['a', 2, 3, 4, 5, 6, 7, 8, 9, 10]

Items in lists can be set using slices also: 
	>>> my_list[1:3] = ['b', 'c']
	>>> my_list
	['a', 'b', 'c', 4, 5, 6, 7, 8, 9, 10]
	
Removing items from a list based on value can be done using the .remove method: 
	>>> my_list.remove('b')
	>>> my_list
	['a', 'c', 4, 5, 6, 7, 8, 9, 10]
	
Items can also be removed from the end of a list using the pop method: 
	>>> my_list = ['a', 'c', 'd']
	>>> my_list
	['a', 'c', 'd']
	>>> my_list.pop()
	'd'
	>>> my_list
	['a', 'c']

We can also use the pop method to remove items at a specific index: 
	>>> my_list.pop(0)
	'a'
	>>> my_list
	['c']

	
	
                     10        20        30   35  <=35 chars 0-34
                      |         |         |    |
more on slicing:	   01234567890          1234 
			 0123456789           1234567890 
>>> comment="Hello World ! Spring is almost here"
>>> len(comment)
35
>>> comment[5:35:2]		<-- beginning with index 5 (the space), for length of 35, print index 6 and every 2nd char from there...
' ol  pigi lothr'
>>>
>>> comment[4]			<-- print char at index 4
'o'
>>>          0123456789012345	<-- 16 chars total (0 - 15)
>>> address="Montreal, Quebec"
>>> len(address)
16
>>> city=address[0:8]
>>> print(city)
Montreal
>>> province=address[10:16]			<-- from index 10 to 16
>>> print(province)
Quebec
>>> province=address[10:]			<-- from index 10 to the end
>>> print(province)
Quebec
>>>


	
	
	
	
	
	
	
	
	


Lecture: Tuples
---------------

Sequence Types . list, tuple, range
	https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range

Tuples
	https://docs.python.org/3/library/stdtypes.html#tuple
	
	
	>>> point = (2.0, 3.0)
	>>> point_3d = point + (4.0,)
	>>> point_3d
	(2.0, 3.0, 4.0)

	>>> x, y, z = point_3d
	>>> x
	2.0
	>>> y
	3.0
	>>> z
	4.0

More common in Python 2:	
	>>> print("My name is: %s %s" % ("Jeff", "Avendano"))
	My name is: Jeff Avendano



	
	
Lecture: Dictionaries (dicts)
-----------------------------

Dictionary
	https://docs.python.org/3/library/stdtypes.html#mapping-types-dict	


We create dictionary literals by using curly braces ({ and }), separating keys 
from values using colons (:), and separating key/value pairs using commas (,). 


	>>> ages = {'jeff': 25, 'jane': 21, 'tom': 29}
	>>> ages
	{'jeff': 25, 'jane': 21, 'tom': 29}
	>>>
	>>> ages['tom']
	29
	>>> ages['kayla'] = 21
	>>> ages
	{'jeff': 25, 'jane': 21, 'tom': 29, 'kayla': 21}
	>>> ages['kayla'] = 52
	>>> ages
	{'jeff': 25, 'jane': 21, 'tom': 51, 'kayla': 52}
	
	
Remove keys with "pop" method:
	>>> ages.pop('tom')
	51
	>>> ages
	{'jeff': 25, 'jane': 21, 'kayla': 23}
	
	>>> ages.keys()
	dict_keys(['jeff', 'jane', 'kayla'])
	>>> list(ages.keys())
	['jeff', 'jane', 'kayla']
	
	>>> ages.values()
	dict_values([25, 21, 23])
	
	>>> list(ages.values())
	[25, 21, 23]

Using dict: 
	>>> weights = dict(kevin=160, bob=240, kayla=135)
	>>> weights
	{'kevin': 160, 'bob': 240, 'kayla': 135}

	>>> colors = dict([('kevin', 'blue'), ('bob', 'green'), ('kayla', 'red')])
	>>> colors
	{'kevin': 'blue', 'bob': 'green', 'kayla': 'red'}



	

Lecture: Conditionals and Comparisons
-------------------------------------
	
Comparisons
	https://docs.python.org/3/library/stdtypes.html#comparisons
	
if/elif/else
	https://docs.python.org/3/tutorial/controlflow.html#if-statements
	

	
 "if"  will always be True or False
  
	>>> if False:
	...     print('was true')
	... else:
	...     print('was false')
	...
	was false

	
	>>> name = "Jefferson"
	>>> if len(name) >= 6:
	...     print('the name is long')					<-- first True statement so stops here!
	... elif len(name) == 9:
	...     print('name is 9 characters')
	... elif len(name) >= 4:
	...     print('name is 4 or more characters')
	... else:
	...     print('what a great name')
	...
	the name is long									<-- output



	
	
Lecture: The 'while' Loop
-------------------------

while  for   continue / break



while
	https://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming
	
for
	https://docs.python.org/3/tutorial/controlflow.html#for-statements%3CPaste%3E


"while"  Loop	:
	
	>>> count = 1
	>>> while count <= 4:
	...     print(f'Loop #: {count}')
	...     count += 1
	...
	Loop #: 1
	Loop #: 2
	Loop #: 3
	Loop #: 4

	
	>>> count = 0
	>>> while count < 10:
	...     if count % 2 == 0:
	...         count += 1
	...         continue
	...     print(f"We're counting odd numbers: {count}")
	...     count += 1
	...
	We're counting odd numbers: 1
	We're counting odd numbers: 3
	We're counting odd numbers: 5
	We're counting odd numbers: 7
	We're counting odd numbers: 9


	>>> while count < 10:
	...     if count % 2 == 0:
	...         break
	...     print(f"We're counting odd numbers: {count}")
	...     count += 1
	...
	We're counting odd numbers: 1

	


	
"for"  Loop	:

	>>> colors = ['blue', 'green', 'orange', 'red']
	>>> for x in colors:
	...     print (x)
	...
	blue
	green
	orange
	red

	>>> for x in colors:
	...     if x == 'blue':
	...         continue
	...     elif x == 'red':
	...         break
	...     print(x)
	...
	green
	orange

for loop with a tuple:	
	>>> point = (2.1, 3.2, 7.5)
	>>> for value in point:
	...     print(value)
	...
	2.1
	3.2
	7.5
	>>>

for loop with a dict:
	>>> ages = dict(kevin=10, bob=20, kayla=35)
	>>> for key in ages:
	...     print(key)
	...
	kevin
	bob
	kayla

	
	>>> list_of_points = [(1, 2), (3, 4), (5, 6)]
	>>> for x, y in list_of_points:
	...     print(f"x: {x}, y: {y}")
	...
	x: 1, y: 2
	x: 3, y: 4
	x: 5, y: 6

	
	>>> for name, age in ages.items():
	...     print(f"Person named: {name}")
	...     print(f"Age of: {age}")
	...
	Person named: kevin
	Age of: 10
	Person named: bob
	Age of: 20
	Person named: kayla
	Age of: 35
	>>>
	>>> ages.items()
	dict_items([('kevin', 10), ('bob', 20), ('kayla', 35)])		<-- returned the dict from above
	>>>

	>>> for a, b in ages.items():
	...     print(f"Person named: {a}")
	...     print(f" is of age: {b}")
	...
	Person named: kevin
	is of age: 10
	Person named: bob
	is of age: 20
	Person named: kayla
	is of age: 35
	
	
	
	
	
Lecture: Logic Operations
-------------------------

	not   or   and

Boolean Operators:
	https://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming


	>>> name = ""
	>>> not name		<-- "not" negates if it's True then answer is False and vice versa	
	True

	
	>>> 0 or 1 or 2
	1						with or, the first "Truethy" value is where it stops
	
	
	
	>>> first = "Jeff"
	>>> last = None
	>>> if first and last:							<- "and" evaluates left to rigth!
	...      print(f"Full name: {first} {last}")
	... elif first:
	...     print(f"First name: {first}")
	... elif last:
	...     print(f"Last name: {last}")
	...
	First name: Jeff
	>>>
	>>> last = "Avendano"
	>>> if first and last:
	...     print(f"Full name is: {first} {last}")
	...
	Full name is: Jeff Avendano


==========================================================================================================

Exercise: Creating and Displaying Variables
-------------------------------------------

first_name - Set to your first name
last_name - Set to your last name
age - Set to your age as an integer
birth_date - Set to your birthdate as a string
	

>>> first_name = ("Jeff")
>>> last_name = ("Avendano")
>>> age = 45
>>> birth_date = ("May 10 1974")
>>> print(f"My name is {first_name} {last_name}.\nI was born on {birth_date}, and I'm {age} years old.")
My name is Jeff Avendano.
I was born on May 10 1974, and I'm 45 years old.
>>>


Exercise: Creating and Displaying Variables
-------------------------------------------

Create a script that has a single variable you can set at the top called user. 
This user is a dictionary containing the keys:

'admin' - a boolean representing whether the user is an admin user.
'active' - a boolean representing whether the user is currently active.
'name' - a string that is the user.s name.

ie: user = { 'admin': True, 'active': True, 'name': 'Jeff' }


>>Using pycharm code below works fine.

	C:\Users\jara\PycharmProjects\Workspace\venv\Scripts\python.exe C:/Users/jara/PycharmProjects/Workspace/venv/elif.py
	ACTIVE - (ADMIN) Jeff
	
	Process finished with exit code 0

>>However from REPL it gives a SyntaxError on print statement :    print(var1 + user['name'])

user = { 'admin': True, 'active': True, 'name': 'Jeff' }
var1 = ""
if user['admin'] and user['active']:
    var1 = "ACTIVE - (ADMIN) "
elif user['admin']:
    var1 = "(ADMIN) "
elif user['active']:
    var1 = "ACTIVE - "
print(var1 + user['name'])



Exercise: Iterating Over Lists
------------------------------
Building on top of the conditional exercise, write a script that will loop through a 
list of users where each item is a user dictionary from the previous exercise printing
out each user.s status on a separate line. Additionally, print the line number at the 
beginning of each line, starting with line 1. Be sure to include a variety of user 
configurations in the users list.

User Keys:

'admin' - a boolean representing whether the user is an admin user.
'active' - a boolean representing whether the user is currently active.
'name' - a string that is the user.s name.
Depending on the values of the user, print one of the following to the screen when you run the script.

Print (ADMIN) followed by the user.s name if the user is an admin.
Print ACTIVE - followed by the user.s name if the user is active.
Print ACTIVE - (ADMIN) followed by the user.s name if the user is an admin and active.
Print the user.s name if neither active nor an admin.




Working code using pyCharm:
==========================

users = [
    { 'admin': True, 'active': True, 'name': 'Jeff' },
    { 'admin': True, 'active': False, 'name': 'Renelle' },
    { 'admin': False, 'active': True, 'name': 'Dave' },
    { 'admin': False, 'active': False, 'name': 'Mike' },
]

line = 1

for user in users:
    var1 = (f"{line} ")

    if user['admin'] and user['active']:
        var1 += "ACTIVE - (ADMIN) "
    elif user['admin']:
        var1 += "(ADMIN) "
    elif user['active']:
        var1 += "ACTIVE - "

    print(var1 + user['name'])
    line += 1

Output:
======

C:\Users\jara\PycharmProjects\Workspace\venv\Scripts\python.exe C:/Users/jara/PycharmProjects/Workspace/venv/elif2.py
1 ACTIVE - (ADMIN) Jeff
2 (ADMIN) Renelle
3 ACTIVE - Dave
4 Mike

Process finished with exit code 0


==========================================================================================================




Lecture: Reading User Input
---------------------------

Input function:  https://docs.python.org/3/library/functions.html#input

	input([prompt])


$ vi age

#!/usr/local/bin/python3.6

name = input("What is your name? ")
birthday = input("When is your birthday? ")
age = int(input("How old are you? "))
print("\n")

print(f"{name} was born on {birthday}")
print(f"Half of your age is {age / 2}")
	

$ chmod u+x age
$ age
What is your name? Jeff
When is your birthday? May 10, 1966
How old are you? 50

Jeff was born on May 10, 1966
Half of your age is 25.0
$



more about input()

>>> msg=input()
I want to be a part MU
>>> msg
'I want to be a part MU'
>>>
>>>
>>> msg=input('Enter your message\n')
Enter your message
Do you like soccer?
>>> msg
'Do you like soccer?'
>>>


>>>
>>> print("My name is Jeff")
My name is Jeff
>>> name="Renelle"
>>> print("My name is " + name)
My name is Renelle
>>>
>>> print(f"{name} is my name")
Renelle is my name
>>>







Lecture: Function Basics
------------------------

Defining Functions:
	https://docs.python.org/3/tutorial/controlflow.html#defining-functions
	

We can create functions in Python using the following:
	The def keyword
	The function name - lowercase starting with a letter or underscore (_)
	Left parenthesis (()
	0 or more argument names
	Right parenthesis ())
	A colon :
	An indented function body



	
Here.s an example without an argument:

>>> def hello_world():
...     print("Hello, World!")
...
>>> hello_world()								<-- print the function, just add the ()
Hello, World!

>>> hello_world
<function hello_world at 0x7f909894f578>		<-- tells us that this it is a function
>>>


If we want to define an argument we will put the variable name 
we want it to have within the parentheses:
>>> def print_name(name):
...     print(f"Name is {name}")
...
>>> print_name("Jeff")
Name is Jeff


Let.s try to assign the value from print_name to a variable:
>>> output = print_name("Smith")
Name is Smith
>>> output
>>>						<-- output alone returns None


If we don.t explicitly declare a return value, then the result will be None.
We can declare what we.re returning from a function using the return keyword:
>>> def add_two(num):
...     return num + 2
...
>>> result = add_two(2)
>>> result
4




Lecture: Using Functions in Scripts
-----------------------------------
Write a script that calculates the user.s Body Mass Index (BMI).

$ vi bmi.py
#!/usr/bin/env python3.6
... put the three pieces below together and save
$ chmod u+x bmi.py
$ ./bmi.py




Formula for BMI:
	BMI = (weight in kg / height in meters squared )
	Imperial version:  BMI * 703
	
step 1)	
Gathering the Info, prompt user multiple times and package up our calls to input 
within a single function that returns a tuple with the user given information:

=======================================
def gather_info():
    height = float(input("What is your heigt?  (inches or meters) "))
    weight = float(input("What is your weigt?  (pounds or kilograms) "))
    system = input("Are your measurements in (m)etric or (i)mperial units? ").lower().strip()     # .strip will strip whitespaces
    return(height, weight, system)								# we want a tuple here
=======================================

We.re converting the height and weight into float values, and we.re okay with a potential
error if the user inputs an invalid number. For the system, we.re going to standardize 
things by calling lower to lowercase the input and then calling strip to remove the whitespace
from the beginning and the end.

The most important thing about this function is the return statement that we added to ensure 
that we can pass the height, weight, and system back to the caller of the function.	
	
	

	
step 2)
Calculating and Printing the BMI. Once we.ve gathered the information, we need to use that 
information to calculate the BMI. 	

Return the Body Mass Index (BMI) for the given weight, height and measurement system.
    
=======================================
def calc_bmi(weight, height, system='metric'):		# system='xxx'   is defining a default, in this case metric
	"""
	Return the Body Mass Index (BMI) for the
	given weight, height and unit of measure.
	"""
    if system == 'metric':
        bmi = (weight / (height ** 2))
    else:
        bmi = 703 * (weight / (height ** 2))
    return bmi
=======================================
	
	
	
step 3)
Setting Up The Script.s Flow. We want to be able to re-prompt the user, so we want to utilize 
an intentional infinite loop that we can break out of. Depending on the system, we.ll determine
how we should calculate the BMI or prompt the user again. Here.s our flow:

======================================
while True:
    height, weight, system = gather_info()
    if system.startswith('i'):
        bmi = calc_bmi(weight, system=system, height=height)
        print(f"Your BMI (using the imperial system) is {bmi}")
        break
    elif system.startswith('m'):
        bmi = calc_bmi(weight, height)
        print(f"Your BMI (using the metric system) is {bmi}")
        break
    else:
        print("Error: Unknown measurement system. Please use imperial or metric.")
======================================


$ ./ bmi.py
What is your heigt?  (inches or meters) 67
What is your weigt?  (pounds or kilograms) 200
Are your measurements in metric or imperial units? m
Your BMI (using the metric system) is 0.044553352639786145






Lecture: Using Standard Library Packages
----------------------------------------

Python Library Reference	 https://docs.python.org/3/library/index.html
. 	    The time package 	 https://docs.python.org/3/library/time.html

A package is an object. 
So the "Time" package is an object.

Importing a package allows us to access functions and classes that it defines.


Let's import library package "time" and call the "localtime" function (and its attributes) provided by the time package.

>>> import time
>>> now = time.localtime()	   # see time function list ->  https://docs.python.org/3/library/time.html
>>> now
time.struct_time(tm_year=2019, tm_mon=3, tm_mday=10, tm_hour=18, tm_min=20, tm_sec=19, tm_wday=6, tm_yday=69, tm_isdst=1)
>>>
>>> now.tm_hour
18
>>> now.tm_year
2019

	"time.struct_time" above is a type "object" and inside the brackets are the "attributes" of said object.
	Note: A methods is an attribute on an object



Here is a small stopwatch program that uses the package "time":

$ cat timer
#!/usr/bin/env python3.6

import time		# see https://docs.python.org/3/library/time.html

start_time = time.localtime()	# we get the local time
#print(f"Timer started at {time.strftime('%X', start_time)}")	# we show what that time is
print(f"Timer started on {time.strftime('%A, %b %d %Y at %H:%M', start_time)}")	# we show what that time is

#Wait for user to stop timer
input("Press 'Enter' to stop timer ")

stop_time = time.localtime()	# we get the local stop time
difference = time.mktime(stop_time) - time.mktime(start_time)	# we calculate the floating point values and make the subtraction

#print(f"Timer stopped at {time.strftime('%X', stop_time)}")
print(f"Timer stopped on {time.strftime('%A, %b %d %Y at %H:%M', stop_time)}")
print(f"Total time:  {difference} seconds")


	We can be selective of which functions we want to use, here we called 
	3 different functions of package "time" :  localtime, mktime, strftime
	
	We can import only those three functions:  
	
	You can therefore replace line:
	import time	
		
	with :
	from time import localtime, mktime, strftime 
	
		and remove all the "time." references! this allows us to only import what is needed.

$ cat timer2
#!/usr/bin/env python3.6

from time import localtime, mktime, strftime

start_time = localtime()	# we get the local time
#print(f"Timer started at {strftime('%X', start_time)}")	# we show what that time is
print(f"Timer started on {strftime('%A, %b %d %Y at %H:%M', start_time)}")	# we show what that time is

#Wait for user to stop timer
input("Press 'Enter' to stop timer ")

stop_time = localtime()	# we get the local stop time
difference = mktime(stop_time) - mktime(start_time)	# we calculate the floating point values and make the subtraction

#print(f"Timer stopped at {strftime('%X', stop_time)}")
print(f"Timer stopped on {strftime('%A, %b %d %Y at %H:%M', stop_time)}")
print(f"Total time:  {difference} seconds")


outputs:
	~ $ ./timer2
	Timer started on Sunday, Mar 10 2019 at 20:10
	Press 'Enter' to stop timer
	Timer stopped on Sunday, Mar 10 2019 at 20:10
	Total time:  12.0 seconds
	~ $
	
	~ $ ./timer
	Timer started on Sunday, Mar 10 2019 at 20:10
	Press 'Enter' to stop timer
	Timer stopped on Sunday, Mar 10 2019 at 20:11
	Total time:  35.0 seconds
	~ $




	
	



	

Lecture: Working with Environment Variables
-------------------------------------------

Packages in this lecture:
	The os package				https://docs.python.org/3/library/os.html
	The os.environ attribute	https://docs.python.org/3/library/os.html#os.environ 
	The os.getenv function		https://docs.python.org/3/library/os.html#os.getenv 


A common way to configure a script or CLI is to use environment variables. 
Learn how to access environment variables from inside of a Python scripts.

Since I'm in my home directory let's add this path to my $PATH variable:

$ export PATH=${PATH}:/~:


$ vi running
#!/usr/bin/env python3.6

import os

stage = os.environ["STAGE"].upper()

output = f"We're running in {stage}"

if stage.startswith("PROD"):
    output = "Danger!!! - " + output

print(output)



outputs:
$ STAGE=staging running		
	We're running in STAGING
	$
	$ STAGE=production running
	Danger!!! - We're running in PRODUCTION
	
	
	!! However, the problem is if an environment variable is not set we run into this problem:
	$ running
	Traceback (most recent call last):
	File "./running", line 5, in <module>
		stage = os.environ["STAGE"].upper()
	File "/usr/local/lib/python3.6/os.py", line 669, in __getitem__
		raise KeyError(key) from None
	KeyError: 'STAGE'
$


So let's set the varaible to a default 

$ cat running
#!/usr/bin/env python3.6

import os

stage = os.getenv("STAGE", default="dev").upper()		<-- changed this line, to function "getenv" and a default catch all!

output = f"We're running in {stage}"

if stage.startswith("PROD"):
    output = "Danger!!! - " + output

print(output)



outputs:
	$ running
	We're running in DEV
	$
	$ STAGE=production running
	Danger!!! - We're running in PRODUCTION
	$
	









Lecture: Interacting with Files
-------------------------------

The open function	https://docs.python.org/3/library/functions.html#open
The file-object		https://docs.python.org/3/glossary.html#term-file-object
The io module		https://docs.python.org/3/library/io.html#io-overview


Interacting with Files:
It.s common to need to read the contents of a file in a script. 
Python makes that easy for us. 

$ cat xmen_base.txt
Storm
Wolverine
Cyclops
Bishop
Nightcrawler



Opening and Reading a File
<><><><><><><><><><><><><>

>>> xmen_file = open('xmen_base.txt', 'r')			<-- open file in read mode and pass it to var xmen_file 
>>> xmen_file
<_io.TextIOWrapper name='xmen_base.txt' mode='r' encoding='UTF-8'>
>>>

The read function:
>>> xmen_file.read()
'Storm\nWolverine\nCyclops\nBishop\nNightcrawler\n'
>>> xmen_file.read()
''						<--  it gave us an empty string when we called the function a second time.
>>>						 That's because the file maintains a cursor position and when we first
						 called read the cursor was moved to the very end of the file.s contents. 
						 If we want to reread the file we.ll need to move the beginning of the 
.						 file using the "seek" function like so:

>>> xmen_file.seek(0)
0
>>> xmen_file.read()
'Storm\nWolverine\nCyclops\nBishop\nNightcrawler\n'
>>>
>>> xmen_file.seek(6)			<-- start at index position 6
6
>>> xmen_file.read()
'Wolverine\nCyclops\nBishop\nNightcrawler\n'
>>>


Try a for loop:
>>> xmen_file.seek(0)
0
>>> for line in xmen_file:				<-- don't forget we did -> xmen_file = open('xmen_base.txt', 'r') <- above..
...     print(line, end="")				<-- added a custom end because of the newline characters (\n) in each line.
...
Storm
Wolverine
Cyclops
Bishop
Nightcrawler
>>>


Once we.re finished working with a file, it is important that we 
close our connection to the file using the "close" function:

>>> xmen_file.close()					<-- file is now closed!
>>> xmen_file.read()					<-- sowe can't read it!!
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: I/O operation on closed file.
>>>



Creating a New File and Writing to It
<><><><><><><><><><><><><><><><><><><>

Create a copy of the  xmen_file.txt  then add additional content to it:

>>> xmen_base = open('xmen_base.txt')			<-- open the existing file "xmen_base.txt" from before 
>>> new_xmen = open('new_xmen.txt', 'w')		<-- creates a new file named "new_xmen.txt"  with 'w'rite mode.

>>> new_xmen.write(xmen_base.read())			<-- read from the base file and use the return value as the argument to write for our new file
>>> new_xmen.close()					<-- close the new file
>>> new_xmen = open(new_xmen.name, 'r+')		<-- reopen new file, using the r+ mode, this allows to read and write content to the file
>>> new_xmen.read()					<-- read the content from the new file
'Storm\nWolverine\nCyclops\nBishop\nNightcrawler\n'
>>>


Now that we have a file that we can read and write from let.s add some more names:

>>> new_xmen.seek(0)						<-- position yourself back at index 0 
0
>>> new_xmen.write("Beast\n")					<-- add new name "Beast\n"
6
>>> new_xmen.write("Phoenix\n")					<-- add another new name "Phoenix\n"
8
>>> new_xmen.seek(0)						<-- position yourself back at index 0
0
>>> new_xmen.read()						<-- and read content of file
'Beast\nPhoenix\ne\nCyclops\nBishop\nNightcrawler\n'  <-- because of the r+ we are overwriting the file on a per character   
.               ^^					  basis since we used seek to go back to the beginning of the file
.							  If we reopen the file in the w mode, the pre-existing contents 
.							  will be truncated.


Appending to a File
<><><><><><><><><><>

Often we want to append to a file without reading its current contents. 
This can be done with the "a" mode.

Let.s close the xmen_base.txt file and reopen it in the a mode to add 
another name without worrying about losing our original content. 

>>> xmen_base.close()

This time, we.re going to use the with statement to temporarily open the
file and have it automatically closed after our code block has executed:

>>> with open('xmen_base.txt', 'a') as f:
...     f.write('Professor Xavier\n')			<-- append 17 characters
...
17
>>> f = open('xmen_base.txt', 'a')
>>> with f:
...     f.write("Something\n")				<-- added 10 new characters
...
10
>>> exit()


$ cat xmen_base.txt					<-- let's check the file 
Storm
Wolverine
Cyclops
Bishop
Nightcrawler
Professor Xavier				<-- the 17 new chars appended
Something					<-- the 10 new chars appended

